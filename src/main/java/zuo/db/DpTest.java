package zuo.db;

public class DpTest {


    /**
     * 一只青蛙一次可以跳一个台阶，也可以一次跳两个台阶。求青蛙跳到第n级的台阶一共有多少种跳法
     */
   public static int f (int  n){
        if(n<=1){
            return n;
        }

        //创建数组保存历史数据
        int[]dp=new int[n+1];
        //给出初始值
        dp[0]=0;
        dp[1]=1;
        //当 n = 2 时，dp[2] = dp[1] + dp[0] = 1。这显然是错误的，你可以模拟一下，应该是 dp[2] = 2。
        dp[2]=2;
        //通过关系式来计算dp[n]
        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        //返回最终结果
        return dp[n];

    }

    /**
     * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
     *  机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
     * 问总共有多少条不同的路径？
     */
    public static int uniquePaths(int m,int n){
        if(m<=0 || n<=0){
            return 0;
        }
        int [][]dp = new int[m][n];
        //初始化
        //列
        for(int i=0;i<m;i++){
            dp[i][0]=1;
        }
        //行
        for(int j=0;j<n;j++){
            dp[0][j]=1;
        }
        //推导出dp[m-1][n-1]
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[j][j-1];
            }
        }
        return dp[m-1][n-1];
    }

    /**
     * 给定一个包含非负整数的 m x n 网格，
     * 请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
     *
     * 说明：每次只能向下或者向右移动一步。
     *
     * 举例：
     输入:
     arr = [
             [1,3,1],
             [1,5,1],
             [4,2,1]
            ]
     输出: 7
     解释: 因为路径 1→3→1→1→1 的总和最小。

     步骤一、定义数组元素的含义
     由于我们的目的是从左上角到右下角，最小路径和是多少，那我们就定义 dp[i] [j]的含义为：
     当机器人从左上角走到(i, j) 这个位置时，最下的路径和是 dp[i] [j]。那么，dp[m-1] [n-1] 就是我们要的答案了。

     注意，这个网格相当于一个二维数组，数组是从下标为 0 开始算起的，所以 由下角的位置是 (m-1, n - 1)，所以 dp[m-1] [n-1] 就是我们要走的答案。

     步骤二：找出关系数组元素间的关系式
     想象以下，机器人要怎么样才能到达 (i, j) 这个位置？
     由于机器人可以向下走或者向右走，所以有两种方式到达

     一种是从 (i-1, j) 这个位置走一步到达

     一种是从(i, j - 1) 这个位置走一步到达

     不过这次不是计算所有可能路径，而是计算哪一个路径和是最小的，那么我们要从这两种方式中，选择一种，使得dp[i] [j] 的值是最小的，显然有
     dp[i] [j] = min(dp[i-1][j]，dp[i][j-1]) + arr[i][j];// arr[i][j] 表示网格种的值
     * @param args
     */




    public static void main(String[] args) {
        int result =f(3);
        System.out.println(result);
    }

}
